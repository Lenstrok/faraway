// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	domain "vio_coding_challenge/internal/domain"

	gomock "github.com/golang/mock/gomock"
)

// MockGeoRepoI is a mock of GeoRepoI interface.
type MockGeoRepoI struct {
	ctrl     *gomock.Controller
	recorder *MockGeoRepoIMockRecorder
}

// MockGeoRepoIMockRecorder is the mock recorder for MockGeoRepoI.
type MockGeoRepoIMockRecorder struct {
	mock *MockGeoRepoI
}

// NewMockGeoRepoI creates a new mock instance.
func NewMockGeoRepoI(ctrl *gomock.Controller) *MockGeoRepoI {
	mock := &MockGeoRepoI{ctrl: ctrl}
	mock.recorder = &MockGeoRepoIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeoRepoI) EXPECT() *MockGeoRepoIMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockGeoRepoI) Get(ctx context.Context, ipAddr string) (*domain.Geolocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, ipAddr)
	ret0, _ := ret[0].(*domain.Geolocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGeoRepoIMockRecorder) Get(ctx, ipAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGeoRepoI)(nil).Get), ctx, ipAddr)
}

// SaveAll mocks base method.
func (m *MockGeoRepoI) SaveAll(ctx context.Context, geos []domain.Geolocation) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAll", ctx, geos)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveAll indicates an expected call of SaveAll.
func (mr *MockGeoRepoIMockRecorder) SaveAll(ctx, geos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAll", reflect.TypeOf((*MockGeoRepoI)(nil).SaveAll), ctx, geos)
}
